module SimpleAccount where

import Prod
import Maybe
import Prim
import Unit
import Blockchain

def pair :: Unit.Unit -> Prim.Transaction -> Prod.Pair Unit.Unit Prim.Transaction
def pair = Prod.Pair [Unit.Unit, Prim.Transaction]

contract Account where

  init (ia :: Unit.Unit) (c :: Blockchain.InitContext) (amount :: Amount) =
    ia

  receive (c :: Blockchain.ReceiveContext) (model :: Unit.Unit) (caller :: Blockchain.Caller) (amount :: Amount) (msg :: Maybe.Maybe Unit.Unit) =
    case msg of
      Maybe.Nothing -> pair model Prim.TxNone
      Maybe.Just (_ :: Unit.Unit) -> pair model Prim.TxReject
