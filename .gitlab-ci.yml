image: "192549843005.dkr.ecr.eu-west-1.amazonaws.com/concordium/base:0.15"

stages:
  - lint
  - build
  - test

.generic:
  variables:
    STACK_ROOT: "${CI_PROJECT_DIR}/consensus/.stack"
    RUSTFLAGS: -Dwarnings -llmdb
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - rustc --version && cargo --version
    - git config --global url.https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/.insteadOf ssh://git@gitlab.com:22/
  cache:
    paths:
      - .stack
      - .stack-work
      - consensus/.stack-work
      - globalstate/haskell-lmdb/.stack-work
      - globalstate/.stack-work
      - scheduler/.stack-work
      - consensus-rust/target
      - deps/internal/concordium-base/rust-src/target
      - deps/internal/concordium-base/.stack-work
      - deps/internal/concordium-base/lib
      - smart-contracts/wasm-chain-integration/target
      - smart-contracts/lib

.generic-haskell-build:
  extends: .generic

.generic-haskell-test:
  extends: .generic
  cache:
    policy: pull
  variables:
    TEST_LEVEL: 1
  needs: ["stack:build"]

"cargo:test":
  extends: .generic
  stage: test
  script:
    - scripts/download-static-libs.sh
    - echo "Running tests without extra features"
    - cargo test --all --features=static --color=always
    - echo "Running tests with network dump, instrumentation, and collector features"
    - cargo test --all --color=always --features=static,instrumentation,collector,network_dump
    - echo "Compiling the benches"
    - cargo bench --features=static --color=always --no-run
    - cargo bench --features=static,s11n_capnp --color=always --no-run
    - cargo bench --features=static,s11n_serde_cbor --color=always --no-run
    - cargo bench --features=static,s11n_serde_msgpack --color=always --no-run

"genesis:test":
  extends: .generic
  stage: test
  script:
    - scripts/download-static-libs.sh
    - scripts/download-genesis-data.sh
    - cargo build --features=genesis_tester,static
    - scripts/test-genesis.sh 1-bakers.tar.gz
    - scripts/test-genesis.sh 5-bakers.tar.gz
    - scripts/test-genesis.sh 20-bakers.tar.gz
    # - scripts/test-genesis.sh 1000-bakers.tar.gz
    - scripts/test-genesis.sh 1-bakers.tar.gz 0
    - scripts/test-genesis.sh 5-bakers.tar.gz 2
    - scripts/test-genesis.sh 20-bakers.tar.gz 10
    # - scripts/test-genesis.sh 1000-bakers.tar.gz 200

.generic-lint:
  extends: .generic

"lint:fmt":
  extends: .generic-lint
  stage: lint
  image: 192549843005.dkr.ecr.eu-west-1.amazonaws.com/concordium/base-rust-fmt:2019-11-13
  script:
    - cargo fmt -- --color=always
    - test $(git ls-files --modified | grep -v ".dll$" | grep -v ".a$" | grep -v ".pc$" | grep -v ".def$" | grep -v "tar.gz" | wc -l) -eq 0 || (echo 'You have introduced some unformatted code:'; git ls-files --modified | grep -v ".dll$" | grep -v ".a$" | grep -v ".pc$" | grep -v ".def$" | grep -v "tar.gz" | sed 's/^/* /'; echo 'Please run `cargo fmt` and amend your MR.'; exit 1)

"lint:fmt-consensus":
  extends: .generic-lint
  stage: lint
  cache: {}
  dependencies: []
  image: 192549843005.dkr.ecr.eu-west-1.amazonaws.com/concordium/base-rust-fmt:2019-11-13
  script:
    - cargo fmt --manifest-path consensus/consensus-rust/Cargo.toml -- --color=always
    - test $(git ls-files --modified | grep -v ".dll$" | grep -v ".a$" | grep -v ".pc$" | grep -v ".def$" | grep -v "tar.gz" | wc -l) -eq 0 || (echo 'You have introduced some unformatted code:'; git ls-files --modified | grep -v ".dll$" | grep -v ".a$" | grep -v ".pc$" | grep -v ".def$" | grep -v "tar.gz" | sed 's/^/* /'; echo 'Please run `cargo fmt` and amend your MR.'; exit 1)
  needs: []

"lint:clippy-consensus":
  extends: .generic-lint
  stage: lint
  script:
    - echo "Running clippy with without extra features"
    - cargo clippy --manifest-path consensus/consensus-rust/Cargo.toml --color=always --all -- -Dclippy::all

"cargo:test-consensus":
  extends: .generic
  stage: test
  script:
    - echo "Running tests without extra features"
    - cargo test --manifest-path consensus/consensus-rust/Cargo.toml --all --color=always

"stack:build":
  extends: .generic-haskell-build
  stage: build
  artifacts:
    expire_in: 1 hour
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME"
    paths:
      - external-libs/
  script:
    - "stack --stack-yaml consensus/stack.yaml build --force-dirty --test --no-run-tests --bench --no-run-benchmarks --ghc-options -j4"
    - consensus/consensus-rust/scripts/setup-ci.sh

"stack:test:globalstate":
  extends: .generic-haskell-test
  stage: test
  script:
    - "stack --stack-yaml consensus/stack.yaml test globalstate --bench --no-run-benchmarks --ta --level=${TEST_LEVEL}"

"stack:test:scheduler":
  extends: .generic-haskell-test
  stage: test
  script:
    - "( cd consensus && ./.diff-wat-wasm.sh )"
    - "stack --stack-yaml consensus/stack.yaml test scheduler --bench --no-run-benchmarks"

"stack:test:consensus":
  extends: .generic-haskell-test
  stage: test
  script:
    - "stack --stack-yaml consensus/stack.yaml test Concordium --bench --no-run-benchmarks --ta --level=${TEST_LEVEL}"

"lint:clippy":
  extends: .generic-haskell-build
  stage: lint
  script:
    # - scripts/download-static-libs.sh
    - stack --stack-yaml consensus/stack.yaml build --fast
    - echo "Running clippy with without extra features"
    - cargo clippy --color=always --all -- -Dclippy::all
    - echo "Running clippy with network dump, instrumentation, collector and staging net features"
    - cargo clippy --features=instrumentation,collector,network_dump,staging_net,database_emitter --color=always --all -- -Dclippy::all
    - echo "Running clippy with s11n features"
    - cargo clippy --features=s11n_capnp --color=always --all -- -Dclippy::all
    - cargo clippy --features=s11n_serde_cbor --color=always --all -- -Dclippy::all
    - cargo clippy --features=s11n_serde_msgpack --color=always --all -- -Dclippy::all
