name: Build and Push Database Exporter

on:
  push:
    branches:
      - lma/release/github_actions

env:
  UBUNTU_VERSION: '20.04'
  GHC_VERSION: '9.6.4'
  STATIC_LIBRARIES_IMAGE_TAG: 'rust-1.73.0_ghc-9.6.4'
  RUST_VERSION: '1.73.0'
  VERSION: '7.0.5-0'
  STACK_VERSION: '2.7.5'
  FLATBUFFERS_VERSION: '22.12.06'
  CABAL_VERSION: '3.6.2.0'
  PROTOC_VERSION: '3.21.5'

jobs:
  build-database-exporter:
    runs-on: ubuntu-latest
    if: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.VERSION }}
          submodules: recursive

#      - name: Extract version tag from Cargo.toml manifest
#        id: meta
#        run: |
#          VERSION=$(yq .package.version concordium-node/Cargo.toml)
#          echo "VERSION=${VERSION}" >> $GITHUB_ENV


      - name: Precheck - Validate Version and Check S3 for existing files
        run: |
          OUTFILE="s3://distribution.concordium.software/tools/linux/database-exporter_${{ env.VERSION }}.deb"
          totalFoundObjects=$(aws s3 ls "$OUTFILE" --summarize | grep "Total Objects: " | sed "s/[^0-9]*//g")
          if [ "$totalFoundObjects" -ne "0" ]; then
            echo "error: $OUTFILE already exists"
            exit 1
          fi
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Database Exporter
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: build-deb:${{ github.run_id }}
          file: scripts/db-exporter/Dockerfile
          build-args: |
            ubuntu_version=${{ env.UBUNTU_VERSION }}
            version=${{ env.VERSION }}
            ghc_version=${{ env.GHC_VERSION }}
            static_libraries_image_tag=${{ env.STATIC_LIBRARIES_IMAGE_TAG }}
          labels: |
            ubuntu_version=${{ env.UBUNTU_VERSION }}
            version=${{ env.VERSION }}
            ghc_version=${{ env.GHC_VERSION }}
            static_libraries_image_tag=${{ env.STATIC_LIBRARIES_IMAGE_TAG }}
          no-cache: true

#      - name: Run Docker and Extract Artifacts
#        run: |
#          docker run -v "${{ env.OUT_DIR }}":/out build-deb:${{ github.run_id }}
#
#      - name: Finish
#        run: |
#          ls -la /out

#      - name: Upload to S3
#        run: |
#          aws s3 cp "${{ env.OUT_DIR }}/database-exporter_${{ steps.set_version.outputs.TAG }}.deb" \
#            "${OUTFILE}" --grants=read=uri=http://acs.amazonaws.com/groups/global/AllUsers
#        env:
#          OUTFILE: s3://distribution.concordium.software/tools/linux/database-exporter_${{ steps.set_version.outputs.TAG }}.deb

  build-p2p-bootstrapper:
    runs-on: ubuntu-latest
    if: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.VERSION }}
          submodules: recursive

      - name: Precheck - Validate Version and Check S3 for existing files
        run: |
          # Check if the file already exists in S3
          OUTFILE="s3://distribution.concordium.software/tools/linux/p2p-bootstrapper_${{ env.VERSION }}.deb"
          totalFoundObjects=$(aws s3 ls "$OUTFILE" --summarize | grep "Total Objects: " | sed "s/[^0-9]*//g")
          if [ "$totalFoundObjects" -ne "0" ]; then
            echo "error: $OUTFILE already exists"
            exit 1
          fi

      - name: Build Static Node Binary Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          file: scripts/static-binaries/static-binaries.Dockerfile
          tags: static-node-binaries:${{ github.run_id }}
          no-cache: true
          build-args: |
            ubuntu_version=${{ env.UBUNTU_VERSION }}
            static_libraries_image_tag=${{ env.STATIC_LIBRARIES_IMAGE_TAG }}
            ghc_version=${{ env.GHC_VERSION }}
          labels: |
            ubuntu_version=${{ env.UBUNTU_VERSION }}
            static_libraries_image_tag=${{ env.STATIC_LIBRARIES_IMAGE_TAG }}
            ghc_version=${{ env.GHC_VERSION }}

      - name: Build Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          file: scripts/bootstrapper/Dockerfile
          tags: build-deb:${{ github.run_id }}
          no-cache: true
          build-args: |
            ubuntu_version=${{ env.UBUNTU_VERSION }}
            version=${{ env.VERSION }}
            static_binaries_image_tag=${{ github.run_id }}
          labels: |
            ubuntu_version=${{ env.UBUNTU_VERSION }}
            version=${{ env.VERSION }}
            static_binaries_image_tag=${{ github.run_id }}

      - name: Make out directory
        run: echo "OUT_DIR=$(mktemp -d)" >> $GITHUB_ENV

      - name: Run Docker Container to Generate Output
        run: |
          docker run \
            --env EXTERNAL_UID=$(id -u) \
            --env EXTERNAL_GID=$(id -g) \
            -v "${{ env.OUT_DIR }}":/out \
            build-deb:${{ github.run_id }}

#      - name: Push Debian Package to S3
#        run: |
#          aws s3 cp "${{ env.OUT_DIR }}/p2p-bootstrapper_${{ steps.set_version.outputs.TAG }}.deb" \
#            "${OUTFILE}" --grants=read=uri=http://acs.amazonaws.com/groups/global/AllUsers
#        env:
#          OUTFILE: s3://distribution.concordium.software/tools/linux/p2p-bootstrapper_${{ steps.set_version.outputs.TAG }}.deb

  build-windows-node:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.VERSION }}
          submodules: recursive


      - name: Install Rust (v1.73.0)
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.73.0

      - name: Setup node folder
        run: |
          mkdir -p "C:/Program Files/node/include"
          echo "C:/Program Files/node" >> $GITHUB_PATH

      - name: Install flatbuffers
        run: |
          curl -L -O https://github.com/google/flatbuffers/releases/download/v22.12.06/Windows.flatc.binary.zip
          unzip Windows.flatc.binary.zip
          mv flatc.exe "C:/Program Files/node/"

      - name: Install protobuf (protoc)
        run: |
          curl -L -O https://github.com/protocolbuffers/protobuf/releases/download/v21.5/protoc-21.5-win64.zip
          unzip protoc-21.5-win64.zip
          mv bin/protoc.exe "C:/Program Files/node/"
          mv include/* "C:/Program Files/node/include"

      - name: Setup Haskell
        uses: haskell-actions/setup@v2
        with:
          ghc-version: ${{ env.GHC_VERSION }}
          cabal-version: ${{ env.CABAL_VERSION }}
          enable-stack: true
          stack-version: ${{ env.STACK_VERSION }}

      - name: Install Windows Dependencies
        run: |
          choco install lmdb

      - name: Build Windows Node
        run: |
          powershell -File ./scripts/distribution/windows/build-all.ps1 -nodeVersion ${{ env.VERSION }} -rustVersion 1.73

  build-macos-node:
    runs-on: macos-latest-large
    if: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.VERSION }}
          submodules: recursive

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.73.0

      - uses: haskell-actions/setup@v2
        with:
          ghc-version: ${{ env.GHC_VERSION }}
          cabal-version: ${{ env.CABAL_VERSION }}
          enable-stack: true
          stack-version: ${{ env.STACK_VERSION }}

      - name: Install flatbuffers
        run: |
          wget https://github.com/google/flatbuffers/releases/download/v${{ env.FLATBUFFERS_VERSION }}/MacIntel.flatc.binary.zip -O MacIntel.flatc.binary.zip
          unzip MacIntel.flatc.binary.zip -d flatbuffers
          sudo mv flatbuffers/flatc /usr/local/bin/

      - name: Install protobuf
        run: |
          wget https://github.com/protocolbuffers/protobuf/releases/download/v21.5/protoc-21.5-osx-x86_64.zip
          unzip protoc-21.5-osx-x86_64.zip -d protoc-21.5
          sudo mv protoc-21.5/bin/protoc /usr/local/bin/
          sudo mv protoc-21.5/include/* /usr/local/include/

      - name: Install Homebrew Packages
        run: |
          brew install lmdb llvm

      - name: Build macOS Package
        run: |
          printf "N\n" | ./scripts/distribution/macOS-package/build.sh ${{ env.VERSION }}
