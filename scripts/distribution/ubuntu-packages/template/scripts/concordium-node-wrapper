#!/usr/bin/env bash

set -x

# Haskell binding needs proper library path to function
export LD_LIBRARY_PATH=/usr/local/lib

ARGS=""

# Determine what arguments to pass to the binary

if [ -n "$LISTEN_PORT" ];
then
    ARGS="$ARGS --listen-port $LISTEN_PORT"
fi

if [ -n "$DESIRED_PEERS" ];
then
    ARGS="$ARGS --desired-nodes $DESIRED_PEERS"
fi

if [ -n "$BAKER_CREDENTIALS_FILE" ];
then
    ARGS="$ARGS --baker-credentials-file $BAKER_CREDENTIALS_FILE"
fi

if [ -n "$TRANSACTION_OUTCOME_LOGGING" ];
then
    ARGS="$ARGS --transaction-outcome-logging"
    if [ -n "$TRANSACTION_OUTCOME_LOGGING_NAME" ];
    then
        ARGS="$ARGS --transaction-outcome-logging-database-name $TRANSACTION_OUTCOME_LOGGING_NAME"
    fi
    if [ -n "$TRANSACTION_OUTCOME_LOGGING_HOST" ];
    then
        ARGS="$ARGS --transaction-outcome-logging-database-host $TRANSACTION_OUTCOME_LOGGING_HOST"
    fi
    if [ -n "$TRANSACTION_OUTCOME_LOGGING_PORT" ];
    then
        ARGS="$ARGS --transaction-outcome-logging-database-port $TRANSACTION_OUTCOME_LOGGING_PORT"
    fi
    if [ -n "$TRANSACTION_OUTCOME_LOGGING_USERNAME" ];
    then
        ARGS="$ARGS --transaction-outcome-logging-database-username $TRANSACTION_OUTCOME_LOGGING_USERNAME"
    fi
    if [ -n "$TRANSACTION_OUTCOME_LOGGING_PASSWORD" ];
    then
        ARGS="$ARGS --transaction-outcome-logging-database-password $TRANSACTION_OUTCOME_LOGGING_PASSWORD"
    fi
fi

if [ -n "$PROMETHEUS_METRICS_SERVER" ];
then
    ARGS="$ARGS --prometheus-server"
fi

if [ -n "$PROMETHEUS_METRICS_PORT" ];
then
    ARGS="$ARGS --prometheus-listen-port $PROMETHEUS_METRICS_PORT"
fi

if [ -n "$PROMETHEUS_METRICS_IP" ];
then
    ARGS="$ARGS --prometheus-listen-addr $PROMETHEUS_METRICS_IP"
fi

if [ -n "$CONFIG_DIR" ];
then
    ARGS="$ARGS --config-dir $CONFIG_DIR"
    mkdir -p $CONFIG_DIR
fi

if [ -n "$DATA_DIR" ];
then
    ARGS="$ARGS --data-dir $DATA_DIR"
    mkdir -p $DATA_DIR
    cd $DATA_DIR
fi

if [ -n "$BOOTSTRAP_FIRST_NODE" ];
then
    ARGS="$ARGS --bootstrap-node $BOOTSTRAP_FIRST_NODE"
fi

if [ -n "$RPC_SERVER_ADDR" ];
then
    ARGS="$ARGS --rpc-server-addr $RPC_SERVER_ADDR"
fi

if [ -n "$RPC_SERVER_PORT" ];
then
    ARGS="$ARGS --rpc-server-port $RPC_SERVER_PORT"
fi

if [ -n "$MAX_NODES" ];
then
    ARGS="$ARGS --max-nodes $MAX_NODES"
fi

if [ -n "$MAX_ALLOWED_NODES" ];
then
    ARGS="$ARGS --max-allowed-nodes $MAX_ALLOWED_NODES"
fi

if [ -n "$MAX_ALLOWED_NODES_PERCENTAGE" ];
then
    ARGS="$ARGS --max-allowed-nodes-percentage $MAX_ALLOWED_NODES_PERCENTAGE"
fi

if [ -n "$EXTRA_ARGS" ];
then
    ARGS="$ARGS $EXTRA_ARGS"
fi

if [ -n "$ARTIFICIAL_DELAY" ];
then
    sleep $ARTIFICIAL_DELAY
fi

if [ -n "$RELAY_BROADCAST_PERCENTAGE" ];
then
    ARGS="$ARGS --relay-broadcast-percentage $RELAY_BROADCAST_PERCENTAGE"
fi

if [ -n "$PROFILING_ARGS" ];
then
    ARGS="$ARGS $PROFILING_ARGS"
fi

if [ -n "$EXTERNAL_PORT" ];
then
    ARGS="$ARGS --external-port $EXTERNAL_PORT"
fi

if [ -n "$BOOTSTRAPPER_WAIT_UNTIL_MINIMUM_NODES" ];
then
    ARGS="$ARGS --wait-until-minimum-nodes $BOOTSTRAPPER_WAIT_UNTIL_MINIMUM_NODES"
fi

if [ -n "$MAX_LATENCY" ];
then
    ARGS="$ARGS --max-latency $MAX_LATENCY"
fi

if [ -n "$HARD_CONNECTION_LIMIT" ];
then
    ARGS="$ARGS --hard-connection-limit $HARD_CONNECTION_LIMIT"
fi

if [ -n "$COLLECTOR_INTERVAL" ];
then
    ARGS="$ARGS --collect-interval $COLLECTOR_INTERVAL"
fi

if [ -n "$COLLECTOR_URL" ];
then
    ARGS="$ARGS --collector-url $COLLECTOR_URL"
fi

if [ -n "$COLLECTOR_NODE_NAME" ];
then
    ARGS="$ARGS --node-name $COLLECTOR_NODE_NAME"
elif [ "$MODE" == "collector" ];
then
    echo "Node name must be given for the collector."
    exit 1
fi

if [ -n "$COLLECTOR_GRPC_HOST" ];
then
    ARGS="$ARGS --grpc-host $COLLECTOR_GRPC_HOST"
fi

if [ -n "$COLLECTOR_GRPC_PORT" ];
then
    ARGS="$ARGS --grpc-port $COLLECTOR_GRPC_PORT"
fi

if [ -n "$THREAD_POOL_SIZE" ];
then
    ARGS="$ARGS --thread-pool-size $THREAD_POOL_SIZE"
fi

if [ -n "$TRUSTED_NODES_FILE" -a -f "$TRUSTED_NODES_FILE" ];
then
    readarray -t host_ports < "$TRUSTED_NODES_FILE"
    for host_port in "${host_ports[@]}"; do
        ARGS="$ARGS --connect-to $host_port"
    done
fi

if [ "$MODE" == "basic" ]; then
    /usr/bin/concordium-node $ARGS
elif [ "$MODE" == "bootstrapper" ]; then
    /usr/bin/p2p_bootstrapper-cli $ARGS
elif [ "$MODE" == "collector" ]; then
    /usr/bin/node-collector $ARGS
else
    echo "No matching MODE was found. Please check!"
fi
