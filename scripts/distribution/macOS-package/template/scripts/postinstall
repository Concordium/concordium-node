#!/bin/bash

set -e

function addBinariesToPath() {
    # Ensure the local bin folder exists
    echo "Ensuring '/usr/local/bin' exists"
    mkdir -p "/usr/local/bin"

    # Create/replace symlinks that are in PATH
    echo "Creating symlinks to node and collector"
    local symlinkNode="/usr/local/bin/concordium-node"
    local symlinkCollector="/usr/local/bin/concordium-node-collector"
    echo "-- Create '$symlinkNode'"
    ln -f -s "/Library/Concordium Node/concordium-node" "$symlinkNode"
    echo "-- Create '$symlinkCollector'"
    ln -f -s "/Library/Concordium Node/node-collector" "$symlinkCollector"
}

function configureService() {
    local netName=$1
    local serviceFileNodeTmp=$2
    local serviceFileCollectorTmp=$3
    local serviceFileNode=$4
    local serviceFileCollector=$5
    local runOnStartup=$6
    local reportToNetworkDashboard=$7
    local runAfterInstall=$8
    local nodeName=$9

    # Obj-c returns 1 for true in NodeConfigurationInstallerPlugin.
    local TRUE=1

    # Make sure the launchdaemons folder exists.
    mkdir -p "/Library/Concordium Node/LaunchDaemons"

    # Add the collector service file and set the node name in it, unless the file already exists.
    if [[ ! -f "$serviceFileCollector" ]]
    then
        echo "  -- Creating collector service file."
        cp "$serviceFileCollectorTmp" "$serviceFileCollector"
        echo "  -- Setting node name to: $nodeName"
        sed -i '' -e 's/__NODE_NAME__/'"$nodeName"'/g' "$serviceFileCollector"
    fi

    # Add the node service file if it doesn't exist.
    if [[ ! -f "$serviceFileNode" ]]
    then
        echo "  -- Creating node service file."
        cp "$serviceFileNodeTmp" "$serviceFileNode"
    fi

    # Add symlinks to service plist files to enable run on startup
    if [[ $runOnStartup = "$TRUE" ]] && [[ $reportToNetworkDashboard = "$TRUE" ]]
    then
        echo "  -- Add node and collector symlinks to '/Library/LaunchDaemons/' for running on startup"
        ln -f -s "$serviceFileNode" "/Library/LaunchDaemons"
        ln -f -s "$serviceFileCollector" "/Library/LaunchDaemons"
    elif [[ $runOnStartup = "$TRUE" ]]
    then
        echo "  -- Add node symlink to '/Library/LaunchDaemons/' for running on startup"
        ln -f -s "$serviceFileNode" "/Library/LaunchDaemons"
    fi

    # Launch services after install
    if [[ $runAfterInstall = "$TRUE" ]] && [[ $reportToNetworkDashboard = "$TRUE" ]]
    then
        echo "  -- Starting node and collector services"
        launchctl load "$serviceFileNode"
        launchctl load "$serviceFileCollector"
    elif [[ $runAfterInstall = "$TRUE" ]]
    then
        echo "  -- Starting node services"
        launchctl load "$serviceFileNode"
    fi

    # Create file for toggling network-dashboard reporting
    if [[ $reportToNetworkDashboard = "$TRUE" ]]
    then
        echo "  -- Creating report to network dashboard file"
        touch "/Library/Concordium Node/REPORT_TO_NETWORK_DASHBOARD_$netName"
    fi
}

# Uninstalls apps and support files related to a net.
function uninstallNet() {
    local netName=${1:?"Missing net name to uninstall"}
    echo "-- Removing $netName node apps and support files"
    rm -rf "/Applications/Concordium Node/Concordium Node Start $netName.app"
    rm -rf "/Applications/Concordium Node/Concordium Node Stop $netName.app"
    rm -rf "/Library/Application Support/Concordium Node/$netName/"
}

function configureServices() {

    # Use data from install configuration
    echo 'Configuring services'
    source "/tmp/software.concordium.node.install.config"

    if [ -z "$CONCORDIUM_NODE_INSTALL_MAINNET_NODE_NAME" ]; then
        uninstallNet "Mainnet"
    else
        echo "-- Mainnet:"
        configureService \
            "MAINNET" \
            "/tmp/Concordium Node/LaunchDaemons/software.concordium.mainnet.node.plist" \
            "/tmp/Concordium Node/LaunchDaemons/software.concordium.mainnet.node-collector.plist" \
            "/Library/Concordium Node/LaunchDaemons/software.concordium.mainnet.node.plist" \
            "/Library/Concordium Node/LaunchDaemons/software.concordium.mainnet.node-collector.plist" \
            "$CONCORDIUM_NODE_INSTALL_MAINNET_RUN_ON_STARTUP" \
            "$CONCORDIUM_NODE_INSTALL_MAINNET_REPORT_TO_NETWORK_DASHBOARD" \
            "$CONCORDIUM_NODE_INSTALL_MAINNET_RUN_AFTER_INSTALL" \
            "$CONCORDIUM_NODE_INSTALL_MAINNET_NODE_NAME"
    fi

    if [ -z "$CONCORDIUM_NODE_INSTALL_TESTNET_NODE_NAME" ]; then
        uninstallNet "Testnet"
    else
        echo "-- Testnet:"
        configureService \
            "TESTNET" \
            "/tmp/Concordium Node/LaunchDaemons/software.concordium.testnet.node.plist" \
            "/tmp/Concordium Node/LaunchDaemons/software.concordium.testnet.node-collector.plist" \
            "/Library/Concordium Node/LaunchDaemons/software.concordium.testnet.node.plist" \
            "/Library/Concordium Node/LaunchDaemons/software.concordium.testnet.node-collector.plist" \
            "$CONCORDIUM_NODE_INSTALL_TESTNET_RUN_ON_STARTUP" \
            "$CONCORDIUM_NODE_INSTALL_TESTNET_REPORT_TO_NETWORK_DASHBOARD" \
            "$CONCORDIUM_NODE_INSTALL_TESTNET_RUN_AFTER_INSTALL" \
            "$CONCORDIUM_NODE_INSTALL_TESTNET_NODE_NAME"
    fi
}

function main (){
    echo "Running postinstall script"

    addBinariesToPath

    configureServices

    echo "Postinstall finished"
}

main
